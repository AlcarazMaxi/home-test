# Production-Ready Docker Compose
# Multi-platform support with comprehensive service orchestration
# Optimized for CI/CD and local development

version: '3.8'

services:
  # Demo Application Service
  demo-app:
    image: automaticbytes/demo-app:latest
    container_name: demo-app-principal
    platform: linux/amd64  # Explicit platform specification
    ports:
      - "3100:3100"
    environment:
      - NODE_ENV=production
      - PORT=3100
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - test-network
    labels:
      - "com.principal-qa.service=demo-app"
      - "com.principal-qa.platform=linux/amd64"

  # API Tests Service
  api-tests:
    build:
      context: ./api-tests
      dockerfile: Dockerfile.principal
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: api-tests-principal
    platform: linux/amd64
    depends_on:
      demo-app:
        condition: service_healthy
    environment:
      - BASE_URL=http://demo-app:3100/api
      - KARATE_ENV=ci
      - JAVA_OPTS=-Xmx512m -Xms256m
    volumes:
      - ./api-tests/target:/app/target
      - ./api-tests/reports:/app/reports
    networks:
      - test-network
    labels:
      - "com.principal-qa.service=api-tests"
      - "com.principal-qa.platform=linux/amd64"

  # UI Tests Service
  ui-tests:
    build:
      context: ./ui-tests
      dockerfile: Dockerfile.principal
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: ui-tests-principal
    platform: linux/amd64
    depends_on:
      demo-app:
        condition: service_healthy
    environment:
      - BASE_URL=http://demo-app:3100
      - HEADLESS=true
      - WORKERS=1
      - NODE_ENV=production
    volumes:
      - ./ui-tests/playwright-report:/app/playwright-report
      - ./ui-tests/test-results:/app/test-results
    networks:
      - test-network
    labels:
      - "com.principal-qa.service=ui-tests"
      - "com.principal-qa.platform=linux/amd64"

  # Monitoring Service
  monitoring:
    image: prom/prometheus:latest
    container_name: monitoring-principal
    platform: linux/amd64
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - test-network
    labels:
      - "com.principal-qa.service=monitoring"
      - "com.principal-qa.platform=linux/amd64"

  # Log Aggregation Service
  logging:
    image: fluent/fluentd:latest
    container_name: logging-principal
    platform: linux/amd64
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf
    networks:
      - test-network
    labels:
      - "com.principal-qa.service=logging"
      - "com.principal-qa.platform=linux/amd64"

# Networks
networks:
  test-network:
    driver: bridge
    name: principal-qa-network
    labels:
      - "com.principal-qa.network=test-network"

# Volumes
volumes:
  test-data:
    driver: local
    name: principal-qa-test-data
    labels:
      - "com.principal-qa.volume=test-data"
  reports:
    driver: local
    name: principal-qa-reports
    labels:
      - "com.principal-qa.volume=reports"
